---
- import_playbook: inventory.yml


- name: Spawn KVM guests

  hosts: molecule

  become: true

  vars_files:
    - ./vars.yml

  pre_tasks:

    - name: Update apt package cache
      apt:
        update_cache: true
      when: ansible_os_family == 'Debian'

    - name: Install disk utils
      apt:
        name:
          - parted
          - lvm2

    - name: Select EC2 NVMe disks
      set_fact:
        ec2_disks: "{{ ec2_disks | default([]) + [ec2_disk] }}"
      vars:
        ec2_disk: "/dev/{{ item.key }}"
      when:  item.value.model == 'Amazon EC2 NVMe Instance Storage'
      loop_control:
        label: "{{ item.key }}"
      loop: "{{ ansible_devices | dict2items }}"

    - name: manage molecule lvm
      when: (ec2_disks is defined) and (ec2_disks | length) > 0
      block:

        - name: Create molecule vg
          lvg:
            vg: molecule
            pvs: "{{ ','.join(ec2_disks) }}"

        - name: Create molecule lv
          lvol:
            vg: molecule
            lv: molecule
            size: "100%VG"

        - name: Create molecule filesystem
          filesystem:
            fstype: ext4
            dev: /dev/mapper/molecule-molecule

        - name: Mount molecule filesystem
          mount:
            path: "{{ cache_dir }}"
            src: /dev/mapper/molecule-molecule
            fstype: ext4
            state: mounted

  tasks:

    - name: Cache installer files
      get_url:
        url: "{{ iso.value.url }}"
        dest: "{{ iso.value.dest | urlsplit('path') }}"
      loop_control:
        loop_var: iso
        label: "{{ iso.key }}"
      loop: "{{ iso_installers | dict2items }}"

    - name: Build guest installer isos
      include_role:
        name: nephelaiio.ubuntu_installer
      vars:
        ubuntu_installer_interface_name: enp1s0
        ubuntu_installer_target_dir: "{{ cache_dir }}"
        ubuntu_installer_image_url: "{{ iso_installers[guest.installer_ref].dest }}"
        ubuntu_installer_hostname: "{{ guest.installer_hostname }}"
        ubuntu_installer_username: molecule
        ubuntu_installer_password: "{{ 'molecule' | password_hash('sha512') }}"
        ubuntu_installer_sshkey:
          - "{{ lookup('file', kvm_key_pair_path + '.pub') }}"
          - "{{ debug_pubkey }}"
        ubuntu_installer_interface: "{{ guest.installer_interface }}"
        ubuntu_installer_partman_method: "{{ guest.installer_partitioning_method }}"
        ubuntu_installer_mirror: "{{ guest.installer_mirror | default('archive.ubuntu.com') }}"
      loop_control:
        loop_var: guest
        label: "{{ guest.installer_hostname }}"
      loop: "{{ guests }}"

    - name: Destroy KVM guest
      virt:
        command: destroy
        name: "{{ guest.installer_hostname }}"
      loop_control:
        loop_var: guest
        label: "{{ guest.installer_hostname }}"
      loop: "{{ guests }}"
      failed_when: false

    - name: Undefine KVM guest
      virt:
        command: undefine
        name: "{{ guest.installer_hostname }}"
      loop_control:
        loop_var: guest
        label: "{{ guest.installer_hostname }}"
      loop: "{{ guests }}"
      failed_when: false

    - name: Destroy KVM guest disks
      file:
        path: "{{ guest_disk }}"
        state: absent
      vars:
        guest_disk: "{{ cache_dir }}/{{ guest.installer_hostname }}.img"
      loop_control:
        loop_var: guest
        label: "{{ guest.installer_hostname }}"
      loop: "{{ guests }}"

    - name: Create KVM guest disks
      command: "qemu-img create {{ guest_disk }} {{ guest_disk_size }}"
      args:
        creates: "{{ guest_disk }}"
      vars:
        guest_disk: "{{ cache_dir }}/{{ guest.installer_hostname }}.img"
        guest_disk_size: "{{ guest.installer_disk_size }}"
      loop_control:
        loop_var: guest
        label: "{{ guest.installer_hostname }}"
      loop: "{{ guests }}"

    - name: Manage permissions for KVM guest disks
      file:
        path: "{{ guest_disk }}"
        owner: libvirt-qemu
        group: kvm
        mode: 0640
      vars:
        guest_disk: "{{ cache_dir }}/{{ guest.installer_hostname }}.img"
      loop_control:
        loop_var: guest
        label: "{{ guest.installer_hostname }}"
      loop: "{{ guests }}"

    - name: Create KVM guest
      virt:
        xml: "{{ xml_template }}"
        command: define
      vars:
        guest_hostname: "{{ guest.installer_hostname }}"
        guest_bridge: "{{ bridge_name }}"
        guest_iso: "{{ cache_dir }}/{{ guest_hostname }}.iso"
        guest_disk_path: "{{ cache_dir }}/{{ guest.installer_hostname }}.img"
        guest_mac: "{{ '52:54:00' | random_mac(seed=guest_hostname)}}"
        guest_disk_format: raw
        xml_template: "{{ lookup('template', 'vm.xml.j2') }}"
      loop_control:
        loop_var: guest
        label: "{{ guest.installer_hostname }}"
      loop: "{{ guests }}"

    - name: Start KVM guest
      virt:
        name: "{{ guest_hostname }}"
        state: running
      vars:
        guest_hostname: "{{ guest.installer_hostname }}"
      loop_control:
        loop_var: guest
        label: "{{ guest.installer_hostname }}"
      loop: "{{ guests }}"
