---
- import_playbook: cache.yml


- name: Initialize environment

  hosts: localhost

  connection: local

  gather_facts: false

  no_log: "{{ molecule_no_log }}"

  vars:

    ssh_port: 22

    security_group_description: Security group for testing Molecule
    security_group_rules:
      - proto: tcp
        from_port: "{{ ssh_port }}"
        to_port: "{{ ssh_port }}"
        cidr_ip: '0.0.0.0/0'
      - proto: tcp
        from_port: "{{ ssh_port_base }}"
        to_port: "{{ (ssh_port_base | int) + (guests | length) - 1 }}"
        cidr_ip: '0.0.0.0/0'
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: '0.0.0.0/0'
    security_group_rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: '0.0.0.0/0'

  vars_files:
    - ./vars.yml

  tasks:

    - name: Ensure instance image is set
      ansible.builtin.fail:
        msg: "missing image attribuge for instance {{ item.name }}"
      loop_control:
        label: "{{ item.name }}"
      loop: "{{ molecule_yml.platforms }}"
      when: item.image is not defined

    - name: Ensure instance type is set
      ansible.builtin.fail:
        msg: "missing instance_type attribuge for instance {{ item.name }}"
      loop_control:
        label: "{{ item.name }}"
      loop: "{{ molecule_yml.platforms }}"
      when: item.instance_type is not defined

    - name: Ensure instance subnet_id is set
      ansible.builtin.fail:
        msg: "missing subnet_id attribuge for instance {{ item.name }}"
      loop_control:
        label: "{{ item.name }}"
      loop: "{{ molecule_yml.platforms }}"
      when: item.subnet_id is not defined

    - name: Ensure instance user is set
      ansible.builtin.fail:
        msg: "missing user attribuge for instance {{ item.name }}"
      loop_control:
        label: "{{ item.name }}"
      loop: "{{ molecule_yml.platforms }}"
      when: item.user is not defined

    - name: Query info for existing subnets
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ aws_env_region }}"
        subnet_ids: "{{ item.subnet_id }}"
      loop_control:
        label: "{{ item.name }}"
      loop: "{{ molecule_yml.platforms }}"
      register: subnet_info

    - name: Create security groups
      amazon.aws.ec2_group:
        region: "{{ aws_env_region }}"
        vpc_id: "{{ subnet.vpc_id }}"
        name: "{{ security_group_name }}"
        description: "{{ security_group_name }}"
        rules: "{{ security_group_rules }}"
        rules_egress: "{{ security_group_rules_egress }}"
      vars:
        subnet: "{{ item.1 }}"
      loop_control:
        label: "{{ subnet.subnet_id }}"
      loop: "{{ q('subelements', subnet_info.results, 'subnets') }}"

    - name: Test for presence of molecule key pair
      ansible.builtin.stat:
        path: "{{ molecule_key_pair_path }}"
      register: molecule_key_pair_local

    - name: Delete remote key pair
      amazon.aws.ec2_key:
        region: "{{ aws_env_region }}"
        name: "{{ molecule_key_pair_name }}"
        state: absent

    - name: Check molecule local key pair
      stat:
        path: "{{ molecule_key_pair_path }}"
      register: molecule_key_pair_local

    - name: Create molecule local key pair
      command: "ssh-keygen -t rsa -f {{ molecule_key_pair_path }} -q -P '' -C ''"
      when: not molecule_key_pair_local.stat.exists

    - name: Create molecule ec2 key pair
      amazon.aws.ec2_key:
        region: "{{ aws_env_region }}"
        name: "{{ molecule_key_pair_name }}"
        key_material: "{{ lookup('file', molecule_key_pair_path + '.pub') }}"

    - name: Query info for existing instances
      community.aws.ec2_instance_info:
        region: "{{ aws_env_region }}"
        filters:
          "tag:ansible_environment": "{{ aws_env_name }}"
          "tag:ansible_project": "{{ aws_project_name }}"
          "instance-state-name": [ "pending", "running" ]
      register: ec2_instance_query

    - name: initialize instance_metadata
      ansible.builtin.set_fact:
        ec2_instance_names: []
        ec2_instance_facts: {}

    - name: build existing instance metadata
      ansible.builtin.set_fact:
        ec2_instance_names: "{{ ec2_instance_names + [ item.tags.Name ] }}"
        ec2_instance_facts: "{{ ec2_instance_facts | combine({ item.tags.Name: item}) }}"
      loop_control:
        label: "{{ item.tags.Name }} - {{ item.instance_id }}"
      loop: "{{ ec2_instance_query.instances }}"

    - name: build target instance metadata
      ansible.builtin.set_fact:
        desired_instances: "{{ molecule_yml.platforms }}"
        desired_instance_names: "{{ molecule_yml.platforms | map(attribute='name') | list }}"

    - name: add hosts to inventory
      ansible.builtin.add_host:
        hostname: "{{ instance_name }}"
        ansible_user: "{{ item.user }}"
        security_group: "{{ security_group_name }}"
        subnet_id: "{{ item.subnet_id }}"
        instance_type: "{{ item.instance_type }}"
        image: "{{ item.image }}"
        create: "{{ not (instance_name in ec2_instance_names) }}"
        groups:
          - provision
      vars:
        instance_name: "{{ item.name }}"
      loop_control:
        label: "{{ instance_name }}"
      loop: "{{ desired_instances }}"

    - name: set names for extra instances
      ansible.builtin.set_fact:
        ec2_extra_instance_names: "{{ ec2_instance_names | difference(desired_instance_names) }}"

    - name: destroy extra instances
      community.aws.ec2_instance:
        region: "{{ aws_env_region }}"
        state: absent
        instance_ids:
          - "{{ instance_id }}"
      vars:
        instance_id: "{{ ec2_instance_facts[item].instance_id }}"
      loop_control:
        label: "{{ instance_id }}"
      loop: "{{ ec2_extra_instance_names }}"


- name: Provision instances

  hosts: provision

  gather_facts: false

  vars_files:
    - ./vars.yml

  tasks:

    - name: Spawn AWS instances
      delegate_to: localhost
      block:

        - name: Create AWS instances
          community.aws.ec2_instance:
            region: "{{ aws_env_region }}"
            name: "{{ inventory_hostname }}"
            state: present
            key_name: "{{ molecule_key_pair_name }}"
            instance_type: "{{ instance_type }}"
            security_groups: "{{ security_group }}"
            image_id: "{{ image }}"
            wait: true
            wait_timeout: 600
            vpc_subnet_id: "{{ subnet_id }}"
            network:
              assign_public_ip: true
            tags:
              ansible_environment: "{{ aws_env_name }}"
              ansible_project: "{{ aws_project_name }}"
              ansible_user: "{{ ansible_user }}"
          when: create | bool

        - name: Wait for instance startup
          community.aws.ec2_instance_info:
            region: "{{ aws_env_region }}"
            filters:
              "tag:ansible_environment": "{{ aws_env_name }}"
              "tag:ansible_project": "{{ aws_project_name }}"
              "instance-state-name": [ "running" ]
          register: ec2_instance_query
          until: (ec2_instance_query.instances | length) == (molecule_yml.platforms | length)
          retries: 30
          delay: 10
