---
- name: Verify ISO creation

  hosts: localhost

  tasks:

    - name: Retrieve guest ISO status
      ansible.builtin.stat:
        path: "{{ cache_dir }}/{{ guest.installer_hostname }}.iso"
      loop_control:
        loop_var: guest
        label: "{{ guest.installer_hostname }}"
      loop: "{{ guests }}"
      register: guest_isos

    - name: Verify ISO creation
      ansible.builtin.fail:
        msg: unable to find iso
      loop_control:
        loop_var: guest_iso
        label: "{{ guest_iso.stat.path | default('unknown') }}"
      loop: "{{ guest_isos.results }}"
      when: not (guest_iso.stat.exists | bool)


- name: Add guests to inventory

  hosts: localhost

  become: true

  tasks:

    - name: Add guest to inventory
      ansible.builtin.add_host:
        name: "{{ guest_hostname }}"
        groups:
          - install
        ansible_user: molecule
        ansible_host: "{{ guest_address }}"
        ansible_port: "{{ guest_port }}"
        ansible_ssh_private_key_file: "{{ kvm_keypair }}"
        partitioning_method: "{{ guest.installer_partitioning_method }}"
        disk_location: "{{ cache_dir }}/{{ guest.installer_hostname }}.img"
        disk_size: "{{ guest.installer_disk_size }}"
        disk_index: "{{ disk_index }}"
      vars:
        guest_hostname: "{{ guest.installer_hostname }}"
        bridge_address: "{{ guest.installer_interface.ipaddress }}"
        guest_address: "{{ bridge_address }}"
        guest_port: 22
      loop_control:
        loop_var: guest
        index_var: disk_index
        label: "{{ guest.installer_hostname }}"
      loop: "{{ guests }}"


- name: Verify guests

  hosts: install

  gather_facts: false

  tasks:

    - name: Debug connection parameters
      ansible.builtin.debug:
        msg: >
          ssh {{ ansible_user }}@{{ ansible_host }}
          {{ ansible_ssh_common_args | default('') }}
          -i {{ ansible_ssh_private_key_file }}
          -p {{ ansible_port }}

    - name: Wait for connection
      block:

        - name: Wait for guest
          ansible.builtin.wait_for_connection:
            sleep: 10
            timeout: 1200

        - name: Gather facts
          ansible.builtin.setup:

        - name: Check passwordless sudo
          ansible.builtin.command: ls /
          become: true

        - name: Gather partition info
          ansible.builtin.shell: "lsblk -l | grep /$"
          register: lsblk_output

        - name: Check static partitioning
          ansible.builtin.fail:
            msg: "expected plain partitioning, found '{{ lsblk_output.stdout }}'"
          when:
            - partitioning_method == 'regular'
            - lsblk_output.stdout is not search("part") or
              lsblk_output.stdout is search("lvm")

        - name: Check lvm partitioning
          when: partitioning_method == 'lvm'
          block:

            - name: Check lvm partitioning
              ansible.builtin.fail:
                msg: "lvm partitioning failed: {{ lsblk_output.stdout }}"
              when:
                - lsblk_output.stdout is not search('lvm')

        - name: Debug disk size
          ansible.builtin.debug:
            msg: "{{ ((installer_root_device.size_total | int) / (gb | int)) | round(2) }} GB"
          vars:
            installer_root_device: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list | first }}"
            gb: "{{ 1024**3 }}"

        - name: Check root device size
          ansible.builtin.fail:
            msg: "{{ installer_root_size }} < {{ installer_root_threshold }} ({{ disk_size }})"
          vars:
            installer_root_device: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list | first }}"
            installer_root_size: "{{ installer_root_device.size_total }}"
            installer_root_threshold: "{{ (0.80 * (disk_size | int)) | int }}"
          when: (installer_root_size | int) < (installer_root_threshold | int)

      always:

        - name: End play for lvm guests
          ansible.builtin.meta: end_host
          when: partitioning_method != 'regular'

        - name: End play guests with disks over 11GB
          ansible.builtin.meta: end_host
          when: disk_size > 11 * gb
          vars:
            gb: "{{ 1024**3 }}"

        - name: Set debug facts
          ansible.builtin.set_fact:
            debug_disk: "{{ disk_location }}.debug"
            debug_hostdir: "{{ _hostdir }}"
            debug_logfile: "{{ _logfile }}"
            debug_output_dir: "{{ output_dir }}"
            debug_output_file: "{{ output_dir }}/{{ inventory_hostname }}.log"
          vars:
            _hostdir: "{{ cache_dir }}/{{ inventory_hostname }}"
            _logfile: "{{ _hostdir }}/var/log/installer/subiquity-server-debug.log"

        - name: Create output directory
          ansible.builtin.file:
            state: directory
            path: "{{ debug_output_dir }}"
          delegate_to: localhost
          run_once: true

        - name: Gather install logs
          delegate_to: localhost
          become: true
          block:

            - name: Create hostname directory
              ansible.builtin.file:
                state: directory
                path: "{{ debug_hostdir }}"

            - name: Load NBD module
              community.general.modprobe:
                name: nbd
                state: present

            - name: Disconnect disk image from NBD device
              ansible.builtin.command: "qemu-nbd -d /dev/nbd{{ disk_index }}"

            - name: Copy guest disk
              ansible.builtin.copy:
                src: "{{ disk_location }}"
                dest: "{{ debug_disk }}"
                remote_src: true

            - name: Connect disk image to NBD device
              ansible.builtin.command: "qemu-nbd -f raw -c /dev/nbd{{ disk_index }} {{ debug_disk }}"

            - name: Query NBD mount target
              ansible.builtin.command: "fdisk -l /dev/nbd{{ disk_index }}"
              register: fdisk_nbd

            - name: Mount guest image file
              ansible.posix.mount:
                path: "{{ debug_hostdir }}"
                src: "{{ (fdisk_nbd.stdout_lines | last).split(' ') | first }}"
                fstype: ext4
                state: ephemeral

            - name: Query guest installation files
              ansible.builtin.find:
                paths: "{{ debug_logfile | dirname }}"
                recurse: no
                file_type: file
              register: debug_files

            - name: Debug guest installation files
              ansible.builtin.debug:
                msg: "{{ debug_files.files | map(attribute='path') }}"

            - name: Copy guest installation log
              ansible.builtin.copy:
                src: "{{ debug_logfile }}"
                dest: "{{ debug_output_file }}"
                remote_src: true
              when: debug_logfile in (debug_files.files | map(attribute='path'))

            - name: Debug installation log location
              ansible.builtin.debug:
                msg: "Installation logs for {{ inventory_hostname }} available at {{ debug_output_file }}"

            - name: Unmount guest
              ansible.posix.mount:
                path: "{{ debug_hostdir }}"
                state: unmounted

            - name: Disconnect disk image from NBD device
              ansible.builtin.command: "qemu-nbd -d /dev/nbd{{ disk_index }}"
