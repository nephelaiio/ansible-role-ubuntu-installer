---
- import_playbook: cache.yml


- import_playbook: inventory.yml


- name: wait for provisioning to complete

  hosts: molecule

  gather_facts: false

  tasks:

    - name: wait for connection
      ansible.builtin.wait_for_connection:
        sleep: 10
        timeout: 600


- name: prepare host networking

  hosts: molecule

  become: true

  vars_files:
    - vars.yml

  tasks:

    - name: install python3
      ansible.builtin.apt:
        name: python3
        update_cache: true

    - name: create dummy bridge
      ansible.builtin.command: "ip link add {{ bridge_name }} type bridge"
      failed_when: false

    - name: create dummy interface
      ansible.builtin.command: "ip link add {{ iface_name }} type dummy"
      failed_when: false

    - name: create dummy bridge slave
      ansible.builtin.command: "ip link set {{ iface_name }} master {{ bridge_name }}"
      failed_when: false

    - name: set bridge interface ip address
      ansible.builtin.command: "ip addr add {{ bridge_host }}/{{ bridge_prefix }} dev {{ bridge_name }}"
      failed_when: false

    - name: start bridge interface
      ansible.builtin.command: "ip link set dev {{ bridge_name }} up"
      failed_when: false

    - name: dnat ssh preroute
      ansible.builtin.iptables:
        table: nat
        chain: PREROUTING
        destination_port: "{{ (ssh_port_base | int) + (port_offset | int) }}"
        to_destination: "{{ item.installer_interface.ipaddress }}:22"
        jump: DNAT
        protocol: tcp
        state: present
      loop_control:
        index_var: port_offset
        label: "{{ item.installer_hostname }}"
      loop: "{{ guests }}"

    - name: dnat ssh output
      ansible.builtin.iptables:
        table: nat
        chain: OUTPUT
        destination_port: "{{ (ssh_port_base | int) + (port_offset | int) }}"
        to_destination: "{{ item.installer_interface.ipaddress }}:22"
        jump: DNAT
        protocol: tcp
        state: present
      loop_control:
        index_var: port_offset
        label: "{{ item.installer_hostname }}"
      loop: "{{ guests }}"

    - name: masquerade bridge
      ansible.builtin.iptables:
        table: nat
        chain: POSTROUTING
        out_interface: "{{ ansible_default_ipv4.interface }}"
        source: "{{ bridge_net }}"
        destination: 0.0.0.0/0
        jump: MASQUERADE
        protocol: all
        state: present

    - name: enable ipv4 forwarding
      ansible.builtin.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: True

    - name: install kvm requirements
      ansible.builtin.apt:
        name:
          - qemu
          - qemu-kvm
          - qemu-efi
          - libvirt-clients
          - libvirt-daemon-system
          - libvirt-daemon-system-systemd
          - python3-libvirt
