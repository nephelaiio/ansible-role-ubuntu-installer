---
- name: Check isolinux configuration file location
  ansible.builtin.command: "find {{ tmpdir_dest.path }} -maxdepth 2 -name isolinux.cfg"
  register: isolinux_cfgdest
  changed_when: false

- name: Configure isolinux
  ansible.builtin.lineinfile:
    path: "{{ isolinux_cfgdest.stdout }}"
    regexp: 'timeout\s+[0-9]+'
    line: 'timeout 1'

- name: Create seed file
  ansible.builtin.template:
    src: ubuntu.seed.j2
    dest: "{{ tmpdir_dest.path }}/{{ ubuntu_installer_seed_file }}"
  vars:
    _hostname: "{{ ubuntu_installer_hostname.split('.') | first }}"
    _host_domain: "{{ ubuntu_installer_hostname.split('.') }}"
    _domain: "{{ (_host_domain | length > 1) | ternary(_host_domain[1:] | join('.'), 'localdomain') }}"
    _username: "{{ ubuntu_installer_username }}"
    _password: "{{ ubuntu_installer_password }}"
    _ssh_keys: "{{ [ubuntu_installer_sshkey] | flatten }}"
    _interface: "{{ ubuntu_installer_interface }}"
    _disk: "{{ ubuntu_installer_disk | default('') }}"
    _mirror: "{{ ubuntu_installer_mirror }}"
    _security_mirror: "{{ ubuntu_installer_security_mirror }}"
    _partman_method: "{{ ubuntu_installer_partman_method }}"
    _packages: "{{ ubuntu_installer_packages }}"

- name: Retrieve seed file checksum
  ansible.builtin.command: "md5sum {{ tmpdir_dest.path }}/{{ ubuntu_installer_seed_file }}"
  register: seed_md5sum
  changed_when: false

- name: Check isolinux boot file location
  ansible.builtin.command: "find {{ tmpdir_dest.path }} -maxdepth 2 -name txt.cfg"
  register: isolinux_bootdest
  changed_when: false

- name: Compute isolinux file locations
  ansible.builtin.set_fact:
    vmlinuz_path: "/install/vmlinuz"
    initrd_path: "/install/initrd.gz"
    isolinux_path: "{{ tmpdir_dest.path }}/isolinux/txt.cfg"

- name: Set bootloader preseed configuration
  ansible.builtin.template:
    src: isolinux.debian.j2
    dest: "{{ isolinux_path }}"
  vars:
    kernel_file: "{{ vmlinuz_path }}"
    initrd_file: "{{ initrd_path }}"
    preseed_url: "{{ ubuntu_installer_seed_url }}"
    preseed_file: "{{ ubuntu_installer_seed_file }}"
    preseed_checksum: "{{ seed_md5sum.stdout.split(' ') | first }}"

- name: Check isolinux bin file location
  ansible.builtin.command: "find {{ tmpdir_dest.path }} -maxdepth 2 -name isolinux.bin"
  register: isolinux_bindest
  changed_when: false

- name: Check isolinux boot cat file location
  ansible.builtin.command: "find {{ tmpdir_dest.path }} -maxdepth 2 -name boot.cat"
  register: isolinux_bootcatdest
  changed_when: false

- name: Compute isolinux bin
  ansible.builtin.set_fact:
    isolinux_bin: "{{ isolinux_bindest.stdout | regex_replace(tmpdir_dest.path + '/', '') }}"
    isolinux_cat: "{{ isolinux_bootcatdest.stdout | regex_replace(tmpdir_dest.path + '/', '') }}"

- name: Create ubuntu autoinstall iso
  ansible.builtin.command: "mkisofs {{ mkisofs_options }} -V 'ubuntu' -b isolinux/isolinux.bin -c isolinux/boot.cat -o {{ target_filename }} ."
  args:
    chdir: "{{ tmpdir_dest.path }}"
  vars:
    mkisofs_options: "-ldots -allow-multidot -d -r -l -J -no-emul-boot -boot-load-size 4 -boot-info-table"
    target_filename: "{{ ubuntu_installer_target_dir }}/{{ ubuntu_installer_target_filename }}"
  changed_when: false
  tags:
    - skip_ansible_lint

- name: Make iso bootable
  ansible.builtin.command: "isohybrid {{ ubuntu_installer_target_dir }}/{{ ubuntu_installer_hostname }}.iso"
  changed_when: false

- name: Remove temporary directories
  ansible.builtin.file:
    path: "{{ tmpdir_dest.path }}"
    state: absent
