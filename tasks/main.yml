---
- name: Install packages
  ansible.builtin.package:
    name: "{{ ubuntu_installer_packages }}"
    state: "{{ ubuntu_installer_package_state }}"

- name: Create temporary target directory
  ansible.builtin.tempfile:
    state: directory
    prefix: iso
  register: tmpdir_dest

- name: Create target ISO directory
  ansible.builtin.file:
    state: directory
    path: "{{ ubuntu_installer_target_dir }}"
    mode: 0750

- name: Fetch source ISO
  ansible.builtin.get_url:
    url: "{{ ubuntu_installer_image_url }}"
    dest: "{{ ubuntu_installer_iso_path }}"
    mode: 0644

- name: Extract ISO contents
  ansible.builtin.command: "7z -y x {{ ubuntu_installer_iso_path }} -o{{ tmpdir_dest.path }}"
  tags:  skip_ansible_lint

- name: Remove ubuntu source ISO
  ansible.builtin.file:
    path: "{{ ubuntu_installer_iso_path }}"
    state: absent

- name: Create cloud-init dir
  ansible.builtin.file:
    dest: "{{ tmpdir_dest.path }}{{ ubuntu_installer_cloudinit }}"
    state: directory
    mode: 0750

- name: Set interface prefix
  ansible.builtin.set_fact:
    ubuntu_installer_interface_prefix: "{{ ubuntu_installer_interface_ip | ipaddr('prefix') }}"
  vars:
    ubuntu_installer_interface_ip: "{{ ubuntu_installer_interface.ipaddress }}/{{ ubuntu_installer_interface.netmask }}"
  when: ubuntu_installer_interface.static | bool

- name: Create cloud-init user data
  ansible.builtin.template:
    src: "user-data.j2"
    dest: "{{ tmpdir_dest.path }}{{ ubuntu_installer_cloudinit }}/user-data"
    mode: 0644
  vars:
    _ssh_user: "{{ ubuntu_installer_username }}"
    _ssh_pass: "{{ ubuntu_installer_password }}"
    _ssh_keys: "{{ [ubuntu_installer_sshkey] | flatten }}"
    _fqdn: "{{ ubuntu_installer_hostname }}"
    _interface: "{{ ubuntu_installer_interface }}"
    _interface_name: "{{ ubuntu_installer_interface_name }}"
    _interface_prefix: "{{ ubuntu_installer_interface_prefix }}"
    _disk: "{{ ubuntu_installer_disk | default('') }}"
    _mirror_primary: "{{ ubuntu_installer_mirror }}"
    _mirror_security: "{{ ubuntu_installer_security_mirror }}"
    _packages: "{{ ubuntu_installer_image_packages }}"
    _storage_layout: "{{ __ubuntu_installer_live_storage_map[ubuntu_installer_partman_method] }}"
    _storage_config: "{{ ubuntu_installer_live_storage | default(__ubuntu_installer_live_storage[ubuntu_installer_partman_method]) }}"

- name: Create cloud-init meta data
  ansible.builtin.file:
    dest: "{{ tmpdir_dest.path }}{{ ubuntu_installer_cloudinit }}/meta-data"
    state: touch
    mode: 0644

- name: Detect isolinux bootloader
  ansible.builtin.stat:
    path: "{{ tmpdir_dest.path }}/isolinux/txt.cfg"
  register: isolinux

- name: Configure grub bootloader
  ansible.builtin.copy:
    dest: "{{ tmpdir_dest.path }}/boot/grub/grub.cfg"
    content: |
      set timeout=1
      loadfont unicode
      set menu_color_normal=white/black
      set menu_color_highlight=black/light-gray

      menuentry "Autoinstall Ubuntu Server" {
        set gfxpayload=keep
        linux   /casper/vmlinuz quiet autoinstall ds=nocloud\;s=/cdrom{{ nocloud_dir }}/  ---
        initrd  /casper/initrd
      }

      grub_platform
    mode: 0644
  vars:
    nocloud_dir: "{{ ubuntu_installer_cloudinit }}"

- name: Build isolinux autoinstall iso
  when: isolinux.stat.exists | bool
  block:

    - name: Remove BOOT folder
      ansible.builtin.file:
        path: "{{ tmpdir_dest.path }}/[BOOT]"
        state: absent

    - name: Configure isolinux bootloader
      ansible.builtin.template:
        src: isolinux.live.j2
        dest: "{{ tmpdir_dest.path }}/isolinux/txt.cfg"
        mode: 0644
      vars:
        kernel_file: /casper/vmlinuz
        initrd_file: /casper/initrd
        nocloud_dir: "{{ ubuntu_installer_cloudinit }}"
      when: isolinux.stat.exists

    - name: Create isolinux autoinstall iso
      ansible.builtin.command: |
        xorriso -as mkisofs
          -ldots -allow-multidot -d -r -l -J -no-emul-boot -boot-load-size 4 -boot-info-table
          -V 'ubuntu'
          -b isolinux/isolinux.bin
          -c isolinux/boot.cat
          -o {{ target_filename }} .
      args:
        chdir: "{{ tmpdir_dest.path }}"
      vars:
        target_filename: "{{ ubuntu_installer_target_dir }}/{{ ubuntu_installer_target_filename }}"
      changed_when: false
      tags: skip_ansible_lint

    - name: Make iso bootable
      ansible.builtin.command: "isohybrid {{ ubuntu_installer_target_dir }}/{{ ubuntu_installer_hostname }}.iso"
      changed_when: false

- name: Build grub autoinstall iso (see https://www.pugetsystems.com/labs/hpc/ubuntu-22-04-server-autoinstall-iso)
  when: not (isolinux.stat.exists | bool)
  block:

    - name: Create temporary boot directory
      ansible.builtin.tempfile:
        state: directory
        prefix: boot
      register: tmpdir_boot

    - name: Move BOOT folder files to iso root
      ansible.builtin.shell: "mv {{ tmpdir_dest.path }}/'[BOOT]'/* {{ tmpdir_boot.path }}"
      tags: skip_ansible_lint

    - name: Delete BOOT folder
      ansible.builtin.shell: "rmdir {{ tmpdir_dest.path }}/'[BOOT]'"
      tags: skip_ansible_lint

    - name: Extract Package indexes
      ansible.builtin.shell: >
        find {{ tmpdir_dest.path }} -name Packages.gz | xargs -I{} sudo bash -c "gunzip -c {} > \$(dirname {})/\$(basename {} .gz)"
      tags: skip_ansible_lint

    - name: Create grub autoinstall iso (see https://unix.stackexchange.com/a/726491)
      ansible.builtin.command: |
        xorriso -as mkisofs
          -V 'ubuntu'
          --grub2-mbr {{ tmpdir_boot.path }}/1-Boot-NoEmul.img
          -partition_offset 16
          --mbr-force-bootable
          -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b {{ tmpdir_boot.path }}/2-Boot-NoEmul.img
          -appended_part_as_gpt
          -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7
          -c '/boot.catalog'
          -b '/boot/grub/i386-pc/eltorito.img'
          -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info
          -eltorito-alt-boot
          -e '--interval:appended_partition_2:::'
          -no-emul-boot
          -o {{ target_filename }} .
      args:
        chdir: "{{ tmpdir_dest.path }}"
      vars:
        target_filename: "{{ ubuntu_installer_target_dir }}/{{ ubuntu_installer_target_filename }}"
      changed_when: false
      tags: skip_ansible_lint

    - name: Remove temporary boot directory
      ansible.builtin.file:
        path: "{{ tmpdir_boot.path }}"
        state: absent

- name: Remove temporary directories
  ansible.builtin.file:
    path: "{{ tmpdir_dest.path }}"
    state: absent
