---
- name: Install packages
  ansible.builtin.package:
    name: "{{ ubuntu_installer_packages }}"
    state: "{{ ubuntu_installer_package_state }}"

- name: Create temporary target directory
  ansible.builtin.tempfile:
    state: directory
    prefix: iso
  register: tmpdir_dest

- name: Create target ISO directory
  ansible.builtin.file:
    state: directory
    path: "{{ ubuntu_installer_target_dir }}"

- name: Fetch source ISO
  ansible.builtin.get_url:
    url: "{{ ubuntu_installer_image_url }}"
    dest: "{{ ubuntu_installer_iso_path }}"

- name: Extract ISO contents
  ansible.builtin.command: "7z -y x {{ ubuntu_installer_iso_path }} -o{{ tmpdir_dest.path }}"
  tags:  skip_ansible_lint

- name: Remove ubuntu source ISO
  ansible.builtin.file:
    path: "{{ ubuntu_installer_iso_path }}"
    state: absent

- name: Create cloud-init dir
  ansible.builtin.file:
    dest: "{{ tmpdir_dest.path }}{{ ubuntu_installer_cloudinit }}"
    state: directory

- name: Set interface prefix
  ansible.builtin.set_fact:
    ubuntu_installer_interface_prefix: "{{ ubuntu_installer_interface_ip | ipaddr('prefix') }}"
  vars:
    ubuntu_installer_interface_ip: "{{ ubuntu_installer_interface.ipaddress }}/{{ ubuntu_installer_interface.netmask }}"
  when: ubuntu_installer_interface.static | bool

- name: Create cloud-init user data
  ansible.builtin.template:
    src: "user-data.j2"
    dest: "{{ tmpdir_dest.path }}{{ ubuntu_installer_cloudinit }}/user-data"
  vars:
    _ssh_user: "{{ ubuntu_installer_username }}"
    _ssh_pass: "{{ ubuntu_installer_password }}"
    _ssh_keys: "{{ [ubuntu_installer_sshkey] | flatten }}"
    _fqdn: "{{ ubuntu_installer_hostname }}"
    _interface: "{{ ubuntu_installer_interface }}"
    _interface_name: "{{ ubuntu_installer_interface_name }}"
    _interface_prefix: "{{ ubuntu_installer_interface_prefix }}"
    _disk: "{{ ubuntu_installer_disk | default('') }}"
    _mirror_primary: "{{ ubuntu_installer_mirror }}"
    _mirror_security: "{{ ubuntu_installer_security_mirror }}"
    _packages: "{{ ubuntu_installer_image_packages }}"
    _storage_layout: "{{ __ubuntu_installer_live_storage_map[ubuntu_installer_partman_method] }}"
    _storage_config: "{{ ubuntu_installer_live_storage | default(__ubuntu_installer_live_storage[ubuntu_installer_partman_method]) }}"

- name: Create cloud-init meta data
  ansible.builtin.file:
    dest: "{{ tmpdir_dest.path }}{{ ubuntu_installer_cloudinit }}/meta-data"
    state: touch

- name: Detect isolinux bootloader
  ansible.builtin.stat:
    path: "{{ tmpdir_dest.path }}/isolinux/txt.cfg"
  register: isolinux

- name: Build isolinux autoinstall iso
  when: isolinux.stat.exists | bool
  block:

    - name: Remove BOOT folder
      ansible.builtin.file:
        path: "{{ tmpdir_dest.path }}/[BOOT]"
        state: absent

    - name: Configure isolinux bootloader
      ansible.builtin.template:
        src: isolinux.live.j2
        dest: "{{ tmpdir_dest.path }}/isolinux/txt.cfg"
      vars:
        kernel_file: /casper/vmlinuz
        initrd_file: /casper/initrd
        nocloud_dir: "{{ ubuntu_installer_cloudinit }}"
      when: isolinux.stat.exists

    - name: Configure grub bootloader
      ansible.builtin.lineinfile:
        backrefs: true
        regexp: '^(\s*linux\s+/casper/vmlinuz\s+quiet)'
        line: '\1 autoinstall ds=noucloud\\;s=/cdrom{{ nocloud_dir }}/'
        validate: "grub-script-check %s"
        path: "{{ tmpdir_dest.path }}/boot/grub/grub.cfg"
      vars:
        kernel_file: /casper/vmlinuz
        initrd_file: /casper/initrd
        nocloud_dir: "{{ ubuntu_installer_cloudinit }}"

    - name: Create isolinux autoinstall iso
      ansible.builtin.command: |
        xorriso -as mkisofs {{ mkisofs_options }}
          -V 'ubuntu'
          -b isolinux/isolinux.bin
          -c isolinux/boot.cat
          -o {{ target_filename }} .
      args:
        chdir: "{{ tmpdir_dest.path }}"
      vars:
        mkisofs_options: "-ldots -allow-multidot -d -r -l -J -no-emul-boot -boot-load-size 4 -boot-info-table"
        target_filename: "{{ ubuntu_installer_target_dir }}/{{ ubuntu_installer_target_filename }}"
      changed_when: false
      tags: skip_ansible_lint

    - name: Make iso bootable
      ansible.builtin.command: "isohybrid {{ ubuntu_installer_target_dir }}/{{ ubuntu_installer_hostname }}.iso"
      changed_when: false

- name: Build grub autoinstall iso
  when: not (isolinux.stat.exists | bool)
  block:

    - name: Fail on unsupported iso
      ansible.builtin.fail:
        msg: "unsupported grub bootloader iso"

- name: Remove temporary directories
  ansible.builtin.file:
    path: "{{ tmpdir_dest.path }}"
    state: absent
